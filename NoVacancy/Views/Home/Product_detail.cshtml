@using System.Text.Json
@{
	ViewData["Title"] = "Product Detail";
	var colores = ViewBag.Colores;
	var imagenesPorColor = ViewBag.ImagenesPorColor as Dictionary<int, List<NoVacancy.Models.Imagen>>;
	string nombre = ViewBag.Nombre;
	string descripcion = ViewBag.Descripcion;
	double precio = ViewBag.Precio;
	string categoria = ViewBag.Categoria;
}

<div class="container my-4 px-2 px-md-0">
    <div class="row justify-content-center">
        <div class="col-12 col-md-10">
            <div class="card shadow p-4 mb-4 border-0 rounded-4">
                <div class="row align-items-center gy-4">
                    <!-- Imagen -->
                    <div class="col-12 col-md-6 text-center mb-3 mb-md-0">
                        <div id="imagen-producto"></div>
                        <div id="miniaturas" class="d-flex justify-content-center gap-2 mt-3"></div>
                    </div>
                    <!-- Detalles del producto -->
                    <div class="col-12 col-md-6">
                        <h4 class="fw-bold mb-2" style="font-size:2rem;">@nombre</h4>
                        <p class="text-muted mb-2">@descripcion</p>
                        <p class="fw-semibold fs-4 mb-1" id="precio-producto" style="display:none"></p>
                        <p class="mb-1"><span class="fw-bold">Categoría:</span> <span class="badge bg-secondary">@categoria</span></p>
                        <p class="mb-1"><span class="fw-bold">Color:</span></p>
                        <div class="mb-3 d-flex flex-wrap gap-2" id="color-options"></div>
                        <p class="mb-1"><span class="fw-bold">Elige la talla:</span></p>
                        <div class="mb-3 d-flex flex-wrap gap-2" id="talla-options"></div>
                        <div id="stock-info" class="mb-2" style="display:none"></div>
                        <div class="mb-2 fs-5">Total: <span id="total-producto" class="fw-bold">$0.00</span></div>
                        <!-- Cantidad y carrito -->
                        <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                            <button class="qty-btn" id="btn-restar">−</button>
                            <span class="mx-2 fs-5" id="cantidad-seleccionada">1</span>
                            <button class="qty-btn" id="btn-sumar">+</button>
                            <button class="add-to-cart ms-0 ms-md-3 mt-2 mt-md-0 btn btn-dark px-4 py-2 rounded-3" id="btn-add-cart" disabled style="background:#ccc; color:#888; cursor:not-allowed; border:1px solid #ccc;">Añadir al carrito</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reseñas de usuarios -->
<div class="container my-5">
    <div class="card shadow border-0 rounded-4 p-4">
        <h5 class="fw-bold mb-3">Reseñas de clientes</h5>
        @{
            var resenias = ViewBag.Resenias as List<NoVacancy.Models.Resenia>;
        }
        @if (resenias != null && resenias.Any())
        {
            <ul class="list-unstyled">
            @foreach (var r in resenias.OrderByDescending(x => x.idResenia))
            {
                <li class="mb-4 border-bottom pb-3">
                    <div class="d-flex align-items-center mb-1">
                        <span class="me-2" style="color:#ffc107; font-size:1.2rem;">
                            @for (int i = 0; i < r.calificacion; i++) { <i class="bi bi-star-fill"></i> }
                            @for (int i = r.calificacion; i < 5; i++) { <i class="bi bi-star"></i> }
                        </span>
                        <span class="fw-bold">@r.Producto?.nombre</span>
                    </div>
                    <div class="mb-1">@r.resenia</div>
                </li>
            }
            </ul>
        }
        else
        {
            <div class="alert alert-info">Este producto aún no tiene reseñas.</div>
        }
    </div>
</div>

@section Scripts {
<script>
	const colores = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(colores));
	const imagenesPorColor = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(imagenesPorColor));
	const variantes = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(@ViewBag.Variantes));
	let colorSeleccionado = colores[0].Color.idColor;
	let tallaSeleccionada = null;
	let cantidad = 1;
	let imagenActual = null;

	function mostrarImagen(colorId, index = 0) {
		const imagenes = imagenesPorColor[colorId];
		const cont = document.getElementById('imagen-producto');
		const miniaturas = document.getElementById('miniaturas');
		if (imagenes && imagenes.length > 0) {
			imagenActual = index;
			cont.innerHTML = `<img src='/images/productos/${imagenes[index].nombre}' class='img-fluid' style='max-height:450px' alt='Imagen producto'>`;
			miniaturas.innerHTML = '';
			imagenes.forEach((img, i) => {
				miniaturas.innerHTML += `<img src='/images/productos/${img.nombre}' class='miniatura-img' data-index='${i}' style='width:64px;height:64px;object-fit:cover;border-radius:8px;cursor:pointer;border:${i===index?'2px solid #000':'2px solid #ccc'}'>`;
			});
			// Evento click para miniaturas
			miniaturas.querySelectorAll('.miniatura-img').forEach(img => {
				img.addEventListener('click', function() {
					mostrarImagen(colorId, parseInt(this.getAttribute('data-index')));
				});
			});
		} else {
			imagenActual = 0;
			cont.innerHTML = `<img src='/images/default-150x150.png' class='img-fluid' alt='Sin imagen'>`;
			miniaturas.innerHTML = '';
		}
	}
	function mostrarTallas(colorId) {
		const color = colores.find(c => c.Color.idColor === colorId);
		const tallas = color ? color.Tallas : [];
		const cont = document.getElementById('talla-options');
		cont.innerHTML = '';
		tallas.forEach(t => {
			cont.innerHTML += `<button class='size-btn' data-talla-id='${t.idTalla}'>${t.nombre}</button>`;
		});
		if (tallas.length === 1) {
			tallaSeleccionada = tallas[0].idTalla;
			setTimeout(() => {
				actualizarSeleccionTalla();
				mostrarStockYPrecio();
			}, 0);
		} else {
			tallaSeleccionada = null;
			actualizarSeleccionTalla();
			document.getElementById('stock-info').style.display = 'none';
			document.getElementById('precio-producto').style.display = 'none';
		}
	}
	function actualizarSeleccionColor() {
		document.querySelectorAll('.color-btn').forEach(btn => {
			if (parseInt(btn.getAttribute('data-color-id')) === colorSeleccionado) {
				btn.style.border = '3px solid #000';
			} else {
				btn.style.border = '2px solid #ccc';
			}
		});
	}
	function actualizarSeleccionTalla() {
		document.querySelectorAll('.size-btn').forEach(btn => {
			if (parseInt(btn.getAttribute('data-talla-id')) === tallaSeleccionada) {
				btn.classList.add('active');
				btn.style.background = '#000';
				btn.style.color = '#fff';
			} else {
				btn.classList.remove('active');
				btn.style.background = '';
				btn.style.color = '';
			}
		});
	}
	function mostrarStockYPrecio() {
		if (!colorSeleccionado || !tallaSeleccionada) return;
		const variante = variantes.find(v => v.idColor === colorSeleccionado && v.idTalla === tallaSeleccionada);
		const stockInfo = document.getElementById('stock-info');
		const precioProducto = document.getElementById('precio-producto');
		const btnAddCart = document.getElementById('btn-add-cart');
		if (variante) {
			if (variante.cantidad <= 0) {
				stockInfo.style.display = '';
				stockInfo.innerHTML = '<span class="text-danger fw-bold">Sin existencias</span>';
				precioProducto.style.display = 'none';
				btnAddCart.disabled = true;
				btnAddCart.style.background = '#ccc';
				btnAddCart.style.color = '#888';
				btnAddCart.style.cursor = 'not-allowed';
				btnAddCart.style.border = '1px solid #ccc';
				actualizarCantidad(0, 0, 0);
				return;
			}
			stockInfo.style.display = '';
			let info = `Stock: ${variante.cantidad}`;
			if (variante.limite !== undefined && variante.limite !== null) {
				info += ` | Límite de compra: ${variante.limite}`;
			}
			stockInfo.innerText = info;
			precioProducto.style.display = '';
			precioProducto.innerText = `$${variante.precio.toFixed(2)}`;
			btnAddCart.disabled = false;
			btnAddCart.style.background = '';
			btnAddCart.style.color = '';
			btnAddCart.style.cursor = '';
			btnAddCart.style.border = '';
			actualizarCantidad(1, variante.cantidad, variante.limite);
		} else {
			stockInfo.style.display = 'none';
			precioProducto.style.display = 'none';
			btnAddCart.disabled = true;
			btnAddCart.style.background = '#ccc';
			btnAddCart.style.color = '#888';
			btnAddCart.style.cursor = 'not-allowed';
			btnAddCart.style.border = '1px solid #ccc';
			actualizarCantidad(0, 0, 0);
		}
	}
	function actualizarCantidad(nuevaCantidad, maxStock, maxLimite) {
		let max = maxStock;
		if (maxLimite !== undefined && maxLimite !== null) {
			max = Math.min(maxStock, maxLimite);
		}
		cantidad = Math.max(1, Math.min(nuevaCantidad, max));
		document.getElementById('cantidad-seleccionada').innerText = cantidad;
		actualizarTotal();
	}
	function actualizarTotal() {
		if (!colorSeleccionado || !tallaSeleccionada) {
			document.getElementById('total-producto').innerText = '$0.00';
			return;
		}
		const variante = variantes.find(v => v.idColor === colorSeleccionado && v.idTalla === tallaSeleccionada);
		if (variante) {
			const total = cantidad * variante.precio;
			document.getElementById('total-producto').innerText = `$${total.toFixed(2)}`;
		} else {
			document.getElementById('total-producto').innerText = '$0.00';
		}
	}
	document.addEventListener('DOMContentLoaded', function() {
		mostrarImagen(colorSeleccionado);
		mostrarTallas(colorSeleccionado);
		actualizarSeleccionColor();
		// Color selection
		document.querySelectorAll('.color-btn').forEach(btn => {
			btn.addEventListener('click', function() {
				colorSeleccionado = parseInt(this.getAttribute('data-color-id'));
				tallaSeleccionada = null;
				mostrarImagen(colorSeleccionado);
				mostrarTallas(colorSeleccionado);
				actualizarSeleccionColor();
				actualizarSeleccionTalla();
				document.getElementById('stock-info').style.display = 'none';
				document.getElementById('precio-producto').style.display = 'none';
				cantidad = 1;
				actualizarTotal();
			});
		});
		// Talla selection
		document.getElementById('talla-options').addEventListener('click', function(e) {
			if (e.target.classList.contains('size-btn')) {
				tallaSeleccionada = parseInt(e.target.getAttribute('data-talla-id'));
				actualizarSeleccionTalla();
				mostrarStockYPrecio();
			}
		});
		document.getElementById('btn-restar').addEventListener('click', function() {
			if (!colorSeleccionado || !tallaSeleccionada) return;
			const variante = variantes.find(v => v.idColor === colorSeleccionado && v.idTalla === tallaSeleccionada);
			if (variante) {
				actualizarCantidad(cantidad - 1, variante.cantidad, variante.limite);
			}
		});
		document.getElementById('btn-sumar').addEventListener('click', function() {
			if (!colorSeleccionado || !tallaSeleccionada) return;
			const variante = variantes.find(v => v.idColor === colorSeleccionado && v.idTalla === tallaSeleccionada);
			if (variante) {
				actualizarCantidad(cantidad + 1, variante.cantidad, variante.limite);
			}
		});
		// Reemplaza confirm() por un modal Bootstrap personalizado
function mostrarModalCarrito(callback) {
    let modalHtml = `
    <div class="modal fade" id="modalCarritoConfirm" tabindex="-1" aria-labelledby="modalCarritoConfirmLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="modalCarritoConfirmLabel">Producto agregado al carrito</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
          </div>
          <div class="modal-body">
            ¿Deseas seguir comprando?
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-dark" id="btnSeguirComprando">Sí, seguir comprando</button>
            <button type="button" class="btn btn-secondary" id="btnIrCarrito">Ir al carrito</button>
          </div>
        </div>
      </div>
    </div>`;
    // Elimina si ya existe
    let oldModal = document.getElementById('modalCarritoConfirm');
    if (oldModal) oldModal.remove();
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    let modal = new bootstrap.Modal(document.getElementById('modalCarritoConfirm'));
    modal.show();
    document.getElementById('btnSeguirComprando').onclick = function() {
        modal.hide();
        if (callback) callback(true);
    };
    document.getElementById('btnIrCarrito').onclick = function() {
        modal.hide();
        if (callback) callback(false);
    };
}
		document.getElementById('btn-add-cart').addEventListener('click', async function() {
			if (!colorSeleccionado || !tallaSeleccionada) {
				alert('Selecciona color y talla');
				return;
			}
			const variante = variantes.find(v => v.idColor === colorSeleccionado && v.idTalla === tallaSeleccionada);
			if (!variante) {
				alert('Variante no disponible');
				return;
			}
			if (variante.cantidad <= 0) {
				alert('No hay existencias de este producto');
				return;
			}
			if (cantidad > variante.cantidad) {
				alert('No puedes añadir más productos de los que hay en stock');
				return;
			}
			const data = new URLSearchParams();
			data.append('idProducto', variante.idProducto);
			data.append('cantidad', cantidad);
			try {
				const response = await fetch('/CarritoLinea/Add', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded',
						'X-Requested-With': 'XMLHttpRequest',
					},
					body: data
				});
				if (response.redirected || response.ok) {
					mostrarModalCarrito(function(seguir) {
						if (!seguir) {
							window.location.href = response.redirected ? response.url : '/CarritoLinea/Shopping_cart';
						}
					});
				} else if (response.status === 401) {
					window.location.href = '/Usuario/Login';
				} else {
					alert('No se pudo agregar al carrito');
				}
			} catch (e) {
				alert('Error de red');
			}
		});
	});
</script>
}